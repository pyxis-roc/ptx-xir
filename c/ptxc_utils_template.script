# this is a comment
# begin with the C file containing the templates
# TODO: allow the ability to specify custom include directories
template ptxc_utils_template.tmplh
# then specify includes for template vars
tvar_include <stdint.h>
tvar_include "128types.h"

# then specify instantiations, note template variables are separated by :
inst MULWIDE MULWIDE_u16_u32 Ti=uint16_t:To=uint32_t
inst MULWIDE MULWIDE_u32_u64 Ti=uint32_t:To=uint64_t
inst MULWIDE MULWIDE_u64_u128 Ti=uint64_t:To=my_uint128_t

inst MULWIDE MULWIDE_s16_s32 Ti=int16_t:To=int32_t
inst MULWIDE MULWIDE_s32_s64 Ti=int32_t:To=int64_t
inst MULWIDE MULWIDE_s64_s128 Ti=int64_t:To=my_int128_t

# create a generic definition without a default
# name  colon-separate-macro-args  template-arg-whose-values-form-the-type-name  controlling expression
generic MULWIDE X:Y Ti X

inst MUL24 MUL24_u32_u64 Ti=uint32_t:To=uint64_t
inst MUL24 MUL24_s32_s64 Ti=int32_t:To=int64_t

# create a generic definition without a default
# name  colon-separate-macro-args  template-arg-whose-values-form-the-type-name  controlling expression
generic MUL24 X:Y Ti X


# then specify instantiations, note template variables are separated by :
inst SATURATE SAT_f32 Ti=float
inst SATURATE SAT_f64 Ti=double
# create a generic definition without a default
# name  colon-separate-macro-args  template-arg-whose-values-form-the-type-name  controlling expression
generic SATURATE X Ti X

inst MAX MAX_f32 Ti=float
inst MAX MAX_f64 Ti=double

inst MAX MAX_s16 Ti=int16_t
inst MAX MAX_s32 Ti=int32_t
inst MAX MAX_s64 Ti=int64_t

inst MAX MAX_u16 Ti=uint16_t
inst MAX MAX_u32 Ti=uint32_t
inst MAX MAX_u64 Ti=uint64_t

# create a generic definition without a default
# name  colon-separate-macro-args  template-arg-whose-values-form-the-type-name  controlling expression
generic MAX X:Y Ti X

inst MIN MIN_f32 Ti=float
inst MIN MIN_f64 Ti=double

inst MIN MIN_s16 Ti=int16_t
inst MIN MIN_s32 Ti=int32_t
inst MIN MIN_s64 Ti=int64_t

inst MIN MIN_u16 Ti=uint16_t
inst MIN MIN_u32 Ti=uint32_t
inst MIN MIN_u64 Ti=uint64_t

# create a generic definition without a default
# name  colon-separate-macro-args  template-arg-whose-values-form-the-type-name  controlling expression
generic MIN X:Y Ti X


inst ADD_ROUND ADD_ROUND_f32 Ti=float
inst ADD_ROUND ADD_ROUND_f64 Ti=double
generic ADD_ROUND X:Y:M Ti X

inst SUB_ROUND SUB_ROUND_f32 Ti=float
inst SUB_ROUND SUB_ROUND_f64 Ti=double
generic SUB_ROUND X:Y:M Ti X

inst MUL_ROUND MUL_ROUND_f32 Ti=float
inst MUL_ROUND MUL_ROUND_f64 Ti=double
generic MUL_ROUND X:Y:M Ti X

inst DIV_ROUND DIV_ROUND_f32 Ti=float
inst DIV_ROUND DIV_ROUND_f64 Ti=double
generic DIV_ROUND X:Y:M Ti X

inst FMA_ROUND FMA_ROUND_f32 Ti=float
inst FMA_ROUND FMA_ROUND_f64 Ti=double
generic FMA_ROUND X:Y:Z:M Ti X

inst RCP_ROUND RCP_ROUND_f32 Ti=float
inst RCP_ROUND RCP_ROUND_f64 Ti=double
generic RCP_ROUND X:M Ti X

inst SQRT_ROUND SQRT_ROUND_f32 Ti=float
inst SQRT_ROUND SQRT_ROUND_f64 Ti=double
generic SQRT_ROUND X:M Ti X

inst extractAndZeroExt_4 extractAndZeroExt_4_u32  Ti=uint32_t*
inst extractAndZeroExt_4 extractAndZeroExt_4_s32  Ti=int32_t*
generic extractAndZeroExt_4 X:Y Ti Y

inst extractAndZeroExt_2 extractAndZeroExt_2_u32  Ti=uint32_t*
inst extractAndZeroExt_2 extractAndZeroExt_2_s32  Ti=int32_t*
generic extractAndZeroExt_2 X:Y Ti Y

inst extractAndSignExt_4 extractAndSignExt_4_u32  Ti=uint32_t*
inst extractAndSignExt_4 extractAndSignExt_4_s32  Ti=int32_t*
generic extractAndSignExt_4 X:Y Ti Y

inst extractAndSignExt_2 extractAndSignExt_2_u32  Ti=uint32_t*
inst extractAndSignExt_2 extractAndSignExt_2_s32  Ti=int32_t*
generic extractAndSignExt_2 X:Y Ti Y

inst ADD_CARRY ADD_CARRY_u16 Ti=uint16_t:Tui=uint16_t
inst ADD_CARRY ADD_CARRY_s16 Ti=int16_t:Tui=uint16_t
inst ADD_CARRY ADD_CARRY_u32 Ti=uint32_t:Tui=uint32_t
inst ADD_CARRY ADD_CARRY_s32 Ti=int32_t:Tui=uint32_t
inst ADD_CARRY ADD_CARRY_u64 Ti=uint64_t:Tui=uint64_t
inst ADD_CARRY ADD_CARRY_s64 Ti=int64_t:Tui=uint64_t
generic ADD_CARRY W:X:Y:Z Ti W

inst SUB_CARRY SUB_CARRY_u16 Ti=uint16_t:Tui=uint16_t
inst SUB_CARRY SUB_CARRY_s16 Ti=int16_t:Tui=uint16_t
inst SUB_CARRY SUB_CARRY_u32 Ti=uint32_t:Tui=uint32_t
inst SUB_CARRY SUB_CARRY_s32 Ti=int32_t:Tui=uint32_t
inst SUB_CARRY SUB_CARRY_u64 Ti=uint64_t:Tui=uint64_t
inst SUB_CARRY SUB_CARRY_s64 Ti=int64_t:Tui=uint64_t
generic SUB_CARRY W:X:Y:Z Ti W

inst MACHINE_SPECIFIC_execute_rem_divide_by_neg MACHINE_SPECIFIC_execute_rem_divide_by_neg_s16 Ti=int16_t
inst MACHINE_SPECIFIC_execute_rem_divide_by_neg MACHINE_SPECIFIC_execute_rem_divide_by_neg_s32 Ti=int32_t
inst MACHINE_SPECIFIC_execute_rem_divide_by_neg MACHINE_SPECIFIC_execute_rem_divide_by_neg_s64 Ti=int64_t
generic MACHINE_SPECIFIC_execute_rem_divide_by_neg X:Y Ti X